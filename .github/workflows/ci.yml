name: CI/CD Pipeline
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  NODE_VERSION: '18.x'

jobs:
  validate:
    name: Code Quality & Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

  integration:
    name: Integration Tests & Build
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start API in background
        run: |
          npm start &
          echo $! > app.pid

      - name: Wait for API to start
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:4000/health; do sleep 1; done'

      - name: Test API endpoints
        run: |
          echo "Testing health endpoint..."
          curl -f http://localhost:4000/health
          echo "Testing root endpoint..."
          curl -f http://localhost:4000/
          echo "Testing math endpoint..."
          curl -f http://localhost:4000/math/add/5/3
          echo "All endpoints working! ✅"

      - name: Stop API
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi

      - name: Build Docker image
        run: docker build -t my-app:${{ github.sha }} .

      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Push Docker image
        run: |
          docker tag my-app:${{ github.sha }} ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:${{ github.sha }}
          docker tag my-app:${{ github.sha }} ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:${{ github.sha }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: integration
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Pulling latest image..."
            docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest
            
            echo "Stopping old container..."
            docker stop my-app || true
            docker rm my-app || true
            
            echo "Starting new container..."
            docker run -d -p 4000:4000 --name my-app --restart unless-stopped ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest
            
            echo "Checking health..."
            sleep 10
            curl -f http://localhost:4000/health || exit 1
            echo "Deploy completed successfully! ✅"