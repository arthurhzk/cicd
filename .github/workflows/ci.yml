name: Integration CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Start API in background
        run: |
          npm start &
          echo $! > app.pid

      - name: Wait for API to start
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:4000/health; do sleep 1; done'

      - name: Test API endpoints
        run: |
          echo "Testing health endpoint..."
          curl -f http://localhost:4000/health

          echo "Testing root endpoint..."
          curl -f http://localhost:4000/

          echo "Testing math endpoint..."
          curl -f http://localhost:4000/math/add/5/3

          echo "All endpoints working! ✅"

      - name: Stop background API and free port
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
            rm app.pid
          fi
          # Kill any remaining processes on port 4000
          sudo lsof -ti:4000 | xargs -r sudo kill -9 || true
          # Wait longer for port to be released
          sleep 5

      - name: Verify port is free
        run: |
          if lsof -i:4000; then
            echo "Port 4000 is still in use!"
            exit 1
          else
            echo "Port 4000 is free"
          fi

      - name: Build Docker image
        run: docker build -t my-app:latest .

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Start services with Docker Compose
        run: docker-compose up -d

      - name: Wait for API to start
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:4000/health; do sleep 1; done'

      - name: Test API endpoints in Docker
        run: |
          echo "Testing health endpoint..."
          curl -f http://localhost:4000/health

          echo "Testing root endpoint..."
          curl -f http://localhost:4000/

          echo "Testing math endpoint..."
          curl -f http://localhost:4000/math/add/5/3

          echo "All endpoints working! ✅"

      - name: Stop services
        run: docker-compose down

      - name: Push Docker image
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        run: |
          echo $DOCKER_HUB_ACCESS_TOKEN | docker login -u $DOCKER_HUB_USERNAME --password-stdin
          docker tag my-app:latest $DOCKER_HUB_USERNAME/my-app:latest
          docker push $DOCKER_HUB_USERNAME/my-app:latest